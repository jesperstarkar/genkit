#!/usr/bin/env bash
#
# Setup script for Genkit engineering.
#
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if ((EUID == 0)) && [[ -z ${DANGEROUSLY_RUN_AS_ROOT+x} ]]; then
  echo "Please do not run as root unless DANGEROUSLY_RUN_AS_ROOT is set."
  exit 1
fi

[[ ${EUID} != 0 ]] && set -euo pipefail

TOP_DIR=$(git rev-parse --show-toplevel)

AUDIENCE="eng"
while getopts ":a:" opt; do
  case ${opt} in
  a)
    AUDIENCE="${OPTARG}"
    ;;
  \?)
    echo "Invalid option: -${OPTARG}" >&2
    exit 1
    ;;
  *)
    echo "Unsupported option: -${OPTARG}" >&2
    exit 1
    ;;
  esac
done

if [[ -z ${AUDIENCE} ]]; then
  echo "Audience flag (-a) is required."
  echo "Usage: $0 -a <eng|ci>"
  exit 1
fi

OS_NAME=$(uname)

PYTHON_CLI_TOOLS=(
  "httpie" # HTTP client.                  See: https://httpie.io/
  "mypy"   # Static type checker.          See: https://mypy.readthedocs.io/en/stable/
  "ruff"   # Fast linter.                  See: https://github.com/astral-sh/ruff
)

# Updates your shell profile to include a path.
function genkit::update_path() {
  local new_path="$1"

  # Remove trailing slash if present.
  new_path="${new_path%/}"

  if [ ! -d "$new_path" ]; then
    echo "Error: Directory $new_path does not exist"
    return 1
  fi

  # Check if path is already in PATH
  if [[ ":$PATH:" != *":$new_path:"* ]]; then
    if [ -n "${ZSH_VERSION:-}" ]; then
      echo "export PATH=\"$new_path:\$PATH\"" >>"$HOME/.zshrc"
    else
      echo "export PATH=\"$new_path:\$PATH\"" >>"$HOME/.bashrc"
    fi

    export PATH="$new_path:$PATH"
    echo "Path $new_path added successfully"
  else
    echo "Path $new_path already exists in PATH"
  fi
}

function genkit::preconfigure_environment() {
  git clean -Xfd
  genkit::update_path "$HOME/.cargo/bin"
  genkit::update_path "$HOME/.local/bin"
  genkit::update_path "$HOME/.local/share/pnpm"
  genkit::update_path "$HOME/go/bin"
  genkit::update_path "$HOME/google-cloud-sdk/bin"
}

# Install all the required tools common to all audiences.
function genkit::install_prerequisites() {
  genkit::preconfigure_environment

  if [[ ${OS_NAME} == "Darwin" && -x "$(command -v brew)" ]]; then
    # Darwin-based systems.
    brew install \
      curl \
      gh \
      go \
      node \
      python3
  elif [[ -x "$(command -v apt)" ]]; then
    # Debian-based systems.
    sudo apt install -y \
      curl \
      gh \
      golang \
      nodejs \
      python3
  elif [[ -x "$(command -v dnf)" ]]; then
    # Fedora-based systems.
    sudo dnf install -y \
      curl \
      gh \
      go \
      node \
      python3
  else
    echo "Unsupported OS. Please install protoc manually."
  fi

  # Install rust.
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  rustup update

  # Install uv for Python versioning, packaging, and workspace management.
  curl -LsSf https://astral.sh/uv/install.sh | sh

  # Install pnpm for JavaScript package management.
  # See: https://github.com/pnpm/pnpm/issues/6217
  curl -fsSL https://get.pnpm.io/install.sh | env ENV="$HOME/.bashrc" SHELL="$(which bash)" PNPM_VERSION=10.0.0 bash -
}

# Install the Google Cloud SDK.
function genkit::install_google_cloud_sdk() {
  # This depends on Python 3.11 and installs it for the user on some systems.
  if command -v gcloud &>/dev/null; then
    gcloud config set disable_usage_reporting true
    gcloud components update
    return 0
  fi

  curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
  gcloud config set disable_usage_reporting true
}

# Install all the required tools that have been written in Go.
function genkit::install_go_cli_tools() {
  go install github.com/Gelio/go-global-update@latest
  go install github.com/captainhook-go/captainhook/cmd/captainhook@latest
  go install github.com/google/go-licenses@latest
  go install github.com/jesseduffield/lazygit@latest
  go install golang.org/x/vuln/cmd/govulncheck@latest
}

# Install all the required tools that have been written in Rust.  We're assuming
# that the user has already installed rust and cargo.
function genkit::install_cargo_cli_tools() {
  cargo install --locked \
    convco \
    fd-find \
    ripgrep \
    rust-parallel \
    taplo-cli
}

# Install NPM packages.
function genkit::install_pnpm_cli_tools() {
  # Install the Genkit CLI. See: https://firebase.google.com/docs/genkit/devtools
  pnpm add -g genkit-cli
}

# Install all the Python-related formatter and static analysis tools.
function genkit::install_python_cli_tools() {
  for package in "${PYTHON_CLI_TOOLS[@]}"; do
    uv tool install "${package}"
  done
}

# Install documentation site generator.
function genkit::install_docs_cli_tools() {
  # Engineering documentation site generator.
  # See: https://squidfunk.github.io/mkdocs-material/
  uv tool install \
    mkdocs \
    --with mkdocs-autorefs \
    --with mkdocs-d2-plugin \
    --with mkdocs-literate-nav \
    --with mkdocs-material \
    --with mkdocs-mermaid2-plugin \
    --with mkdocs-minify-plugin \
    --with mkdocstrings[python]
}

# Install pre-commit hooks.
function genkit::install_pre_commit_hooks() {
  captainhook install -f -c "${TOP_DIR}/py/captainhook.json"
}

# Setup genkit.
function genkit::setup_genkit() {
  pushd "${TOP_DIR}"
  pnpm i
  pnpm run setup
  popd
}

# Install all the common packages.
function genkit::install_common_packages() {
  genkit::install_prerequisites
  genkit::install_go_cli_tools
  genkit::install_cargo_cli_tools
  genkit::install_python_cli_tools
  genkit::install_docs_cli_tools
  genkit::install_pnpm_cli_tools
}

# Install all the required tools for CI.
function genkit::install_ci_packages() {
  genkit::install_common_packages
}

# Install all the required tools for engineering.
function genkit::install_eng_packages() {
  genkit::install_common_packages
  genkit::install_google_cloud_sdk
  genkit::install_pre_commit_hooks
  genkit::setup_genkit
}

# Entry point for the setup script.
function genkit::main() {
  case "${AUDIENCE}" in
  eng)
    genkit::install_eng_packages
    ;;
  ci)
    genkit::install_ci_packages
    ;;
  *)
    echo "Unsupported audience: ${AUDIENCE}"
    exit 1
    ;;
  esac

  echo "Please restart your shell."
}

# Let's go!
genkit::main
